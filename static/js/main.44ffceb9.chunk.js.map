{"version":3,"sources":["components/field/Field.jsx","components/firstStepForm/FirstStepForm.jsx","components/secondStepForm/SecondStepForm.jsx","components/form/Form.jsx","components/button/Button.jsx","helpers/validation.js","containers/RegistrationForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Field","props","label","name","type","value","onChange","validate","error","className","message","classes","cn","onBlur","onFocus","defaultProps","memo","FirstStepForm","values","errors","handleChange","login","password","phoneNumber","SecondStepForm","firstName","lastName","email","Form","children","title","onSubmit","formClasses","Button","onClick","disabled","text","emptyFieldError","emailRegex","RegExp","phoneRegex","fieldValidation","trim","initialValues","firstStepFields","secondStepFields","trimedEmail","length","phone","test","RegistrationForm","useState","step","setStep","0","1","stepsValidity","setStepsValidity","setValues","setErrors","currentFields","handleSubmit","useCallback","event","preventDefault","console","log","target","prev","validateStep","rest","newErrors","isValid","fields","every","field","isValidStep","toggleStep","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44ffceb9.chunk.js","sourcesContent":["import * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport './styles.scss';\n\nconst Field = (props) => {\n  const { label, name, type, value, onChange, validate, error, className, message } = props;\n  const classes = cn('field', className);\n \n  return (\n    <label className={classes}>\n      {label && <span className=\"field__label\">{label}:</span>}\n      <input\n        type={type}\n        name={name}\n        value={value}\n        onChange={onChange}\n        onBlur={validate}\n        onFocus={validate}\n        className='field__input field__input_dark'\n      />\n      {error && <span className='field__info field__info_error'>{error}</span>}\n      {message && !error && <span className='field__info field__info_message'>{message}</span>}\n    </label>\n  );\n};\n\nField.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(['text', 'password', 'email', 'tel']),\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  validate: PropTypes.func,\n  error: PropTypes.string,\n  message: PropTypes.string,\n};\n\nField.defaultProps = {\n  type: 'text',\n  value: '',\n};\n\nexport default memo(Field);","import * as React from 'react';\nimport { memo } from 'react';\nimport Field from '../field/Field';\n\nconst FirstStepForm = (props) => {\n  const { values, errors, handleChange, validate } = props;\n\n  return (\n    <>\n      <Field\n        label='Логин'\n        name='login'\n        value={values.login}\n        error={errors.login}\n        onChange={handleChange}\n        validate={validate}\n      />\n      <Field\n        label='Пароль'\n        name='password'\n        value={values.password}\n        type='password'\n        error={errors.password}\n        onChange={handleChange}\n        validate={validate}\n      />\n      <Field\n        label='Номер телефона'\n        name='phoneNumber'\n        value={values.phoneNumber}\n        type='tel'\n        error={errors.phoneNumber}\n        onChange={handleChange}\n        validate={validate}\n        message='на случай, если вы забудете свой пароль'\n      />\n    </>\n  );\n}\n\nexport default memo(FirstStepForm);","import * as React from 'react';\nimport { memo } from 'react';\nimport Field from '../field/Field';\n\nconst SecondStepForm = (props) => {\n  const { values, errors, handleChange, validate } = props;\n  \n  return (\n    <>\n      <Field\n        label='Имя'\n        name='firstName'\n        value={values.firstName}\n        error={errors.firstName}\n        onChange={handleChange}\n        validate={validate}\n      />\n      <Field\n        label='Фамилия'\n        name='lastName'\n        value={values.lastName}\n        error={errors.lastName}\n        onChange={handleChange}\n        validate={validate}\n      />\n      <Field\n        label='E-mail'\n        name='email'\n        value={values.email}\n        type='email'\n        error={errors.email}\n        onChange={handleChange}\n        validate={validate}\n        message='будем присылать крутые открытки по праздникам'\n      />\n    </>\n  );\n}\n\nexport default memo(SecondStepForm);","\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport './styles.scss';\n\nconst Form = (props) => {\n  const {className, children, title, onSubmit } = props;\n  const formClasses = cn('form', className);\n\n  return (\n    <form className={formClasses} onSubmit={onSubmit}>\n      {title && <h1 className='form__title'>{title}</h1>}\n      {children}\n    </form>\n)};\n\nForm.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.element,\n  title: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n\nexport default Form;","import * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport './styles.scss';\n\nconst Button = ({ type, onClick, disabled, text, className }) => {\n  const classes = cn('button', className);\n  return (\n  <button\n    type={type}\n    onClick={onClick}\n    disabled={disabled}\n    className={classes}\n  >{text}</button>\n  );\n}\n\nButton.propTypes = {\n  type: PropTypes.oneOf(['button', 'submit']),\n  text: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  type: 'button',\n  text: '',\n  disabled: false,\n};\n\nexport default memo(Button);","const emptyFieldError = 'поле не может быть пустым';\nconst emailRegex = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst phoneRegex = new RegExp(/^(\\+7|7|8)?[\\s\\-]?\\(?[489][0-9]{2}\\)?[\\s\\-]?[0-9]{3}[\\s\\-]?[0-9]{2}[\\s\\-]?[0-9]{2}$/);\n\nexport const emailValidation = (email) => {\n  if (emailRegex.test(email)) {\n    return null;\n  }\n  if (email.trim() === '') {\n    return emptyFieldError;\n  }\n\n  return 'введите корректный email';\n};\n\nexport const passwordValidation = (password) => {\n  const trimedEmail = password.trim();\n  if (trimedEmail.length >= 8) {\n    return null;\n  }\n\n  if (trimedEmail === '') {\n    return emptyFieldError;\n  }\n\n  return 'пароль должен содержать не менее 8 символов';\n};\n\nexport const phoneValidation = (phone) => {\n  if (phoneRegex.test(phone)) {\n    return null;\n  }\n\n  if (phone.trim() === '') {\n    return emptyFieldError;\n  }\n\n  return 'введите корректный телефон';\n}\n\nexport const fieldValidation = (value) => value.trim() === '' ? emptyFieldError : null;","import * as React from 'react';\nimport { useState, useCallback } from 'react';\nimport cn from 'classnames';\n\nimport FirstStepForm from '../components/firstStepForm/FirstStepForm';\nimport SecondStepForm from '../components/secondStepForm/SecondStepForm';\nimport Form from '../components/form/Form';\nimport Button from '../components/button/Button';\nimport { fieldValidation, passwordValidation, phoneValidation, emailValidation } from '../helpers/validation';\n\nconst initialValues = {\n  login: '',\n  password: '',\n  phoneNumber: '',\n  firstName: '',\n  lastName: '',\n  email: '',\n};\n\nconst firstStepFields = ['login', 'password', 'phoneNumber'];\nconst secondStepFields = ['firstName', 'lastName', 'email'];\n\nconst validate = {\n  login: fieldValidation,\n  password: passwordValidation,\n  phoneNumber: phoneValidation,\n  firstName: fieldValidation,\n  lastName: fieldValidation,\n  email: emailValidation,\n};\n\nconst RegistrationForm = () => {\n  const [step, setStep] = useState(0);\n  const [stepsValidity, setStepsValidity] = useState({ 0: false, 1: false });\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  \n  const currentFields = step === 0 ? firstStepFields : secondStepFields;\n  const formClasses = cn({ 'form_second': step === 1 });\n\n  const handleSubmit = useCallback((event) => {\n    event.preventDefault();\n    console.log(values);\n  }, [values]);\n\n  const handleChange = useCallback((event) => {\n    const { value, name } = event.target;\n    setValues((prev) => ({ ...prev, [name]: value.trim()}));\n  }, []);\n\n  const isValidStep = (errors, values, fields) => fields\n    .every((field) => values[field] !== '' && !errors[field]);\n\n  const validateStep = (event) => {\n    const { value, name } = event.target;\n    const error = validate[name](value);\n    const { [name]: removedError, ...rest } = errors;\n    const newErrors = { ...rest, ...(error && { [name]: error }) };\n\n    setErrors(newErrors);\n    setStepsValidity((prev) => {\n      const isValid = isValidStep(newErrors, values, currentFields);\n      return { ...prev, ...{ [step]: isValid }};\n    });\n  };\n\n  const toggleStep = useCallback(() => setStep(+!step), [step]);\n\n  return (\n    <Form className={formClasses} onSubmit={handleSubmit} title='Регистрация'>\n      <>{step === 0\n        ? <FirstStepForm\n          values={values}\n          errors={errors}\n          validate={validateStep}\n          handleChange={handleChange}\n        />\n        : <SecondStepForm\n          values={values}\n          errors={errors}\n          validate={validateStep}\n          handleChange={handleChange}\n        />}\n        {step === 0\n        ? <Button\n          className='button_purple'\n          text='Продолжить'\n          disabled={!stepsValidity[0]}\n          onClick={toggleStep}\n        /> : <>\n        <Button\n          className='button_purple form__button'\n          text='Зарегистрироваться'\n          type='submit'\n          disabled={!stepsValidity[1]}\n        />\n        <Button\n          className='button-link form__link'\n          type='submit'\n          text='< Назад'\n          onClick={toggleStep}\n        />\n        </>}\n      </>\n    </Form>\n  );\n};\n\nexport default RegistrationForm;","import './common/main.scss';\nimport RegistrationForm from './containers/RegistrationForm';\n\nfunction App() {\n  return (\n    <div className='wrapper wrapper_dark'>\n      <RegistrationForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}